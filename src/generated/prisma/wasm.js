
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password_hash: 'password_hash',
  avatar: 'avatar',
  google_id: 'google_id',
  code: 'code',
  code_generated_at: 'code_generated_at',
  is_verified: 'is_verified',
  refresh_token: 'refresh_token',
  refresh_generated_at: 'refresh_generated_at',
  google_refresh_token: 'google_refresh_token',
  phone_number: 'phone_number',
  address_line_1: 'address_line_1',
  address_line_2: 'address_line_2',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PlansScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price_cents: 'price_cents',
  currency: 'currency',
  billing_interval: 'billing_interval',
  trial_period_days: 'trial_period_days',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  plan_id: 'plan_id',
  status: 'status',
  start_date: 'start_date',
  end_date: 'end_date',
  trial_end_date: 'trial_end_date',
  cancel_at: 'cancel_at',
  canceled_at: 'canceled_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  subscription_id: 'subscription_id',
  amount_cents: 'amount_cents',
  currency: 'currency',
  status: 'status',
  payment_method_id: 'payment_method_id',
  invoice_id: 'invoice_id',
  transaction_reference: 'transaction_reference',
  paid_at: 'paid_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PaymentMethodsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  provider: 'provider',
  type: 'type',
  last_digits: 'last_digits',
  expiry_month: 'expiry_month',
  expiry_year: 'expiry_year',
  brand: 'brand',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  subscription_id: 'subscription_id',
  payment_method_id: 'payment_method_id',
  amount_due_cents: 'amount_due_cents',
  amount_paid_cents: 'amount_paid_cents',
  currency: 'currency',
  due_date: 'due_date',
  paid_at: 'paid_at',
  status: 'status',
  invoice_number: 'invoice_number',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RefundsScalarFieldEnum = {
  id: 'id',
  payment_id: 'payment_id',
  amount_cents: 'amount_cents',
  currency: 'currency',
  reason: 'reason',
  status: 'status',
  gateway_ref: 'gateway_ref',
  processed_at: 'processed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WebhookEventsScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  event_type: 'event_type',
  event_id: 'event_id',
  payload: 'payload',
  processed: 'processed',
  recieved_at: 'recieved_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Currency = exports.$Enums.Currency = {
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  NGN: 'NGN'
};

exports.BillingInterval = exports.$Enums.BillingInterval = {
  monthly: 'monthly',
  yearly: 'yearly'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  active: 'active',
  past_due: 'past_due',
  cancelled: 'cancelled',
  trailing: 'trailing',
  expired: 'expired'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  succeeded: 'succeeded',
  failed: 'failed',
  refunded: 'refunded'
};

exports.PaymentProviders = exports.$Enums.PaymentProviders = {
  stripe: 'stripe'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  card: 'card'
};

exports.CardBrand = exports.$Enums.CardBrand = {
  visa: 'visa',
  mastercard: 'mastercard'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  draft: 'draft',
  open: 'open',
  paid: 'paid',
  void: 'void',
  uncollectible: 'uncollectible'
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  pending: 'pending',
  succeeded: 'succeeded',
  failed: 'failed'
};

exports.WebhookEventProcessedStatus = exports.$Enums.WebhookEventProcessedStatus = {
  pending: 'pending',
  processed: 'processed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Plans: 'Plans',
  Subscriptions: 'Subscriptions',
  Payments: 'Payments',
  PaymentMethods: 'PaymentMethods',
  Invoices: 'Invoices',
  Refunds: 'Refunds',
  WebhookEvents: 'WebhookEvents'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
